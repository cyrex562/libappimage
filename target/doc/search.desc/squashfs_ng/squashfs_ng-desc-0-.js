searchState.loadedDescShard("squashfs_ng", 0, "This crate provides Rust bindings for the squashfs-tools-ng…\nContains the error value\nErrors raised by the underlying library.\nContains the success value\nResult type returned by SquashFS library operations.\nErrors encountered while reading or writing an archive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFacilities for reading SquashFS archives.\nFacilities for writing SquashFS archives.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn open SquashFS archive.\nA block device file, containing the device’s major and …\nA character device file, containing the device’s major …\nEnum type for the various kinds of data that an inode can …\nA directory in the archive.\nA directory, containing a <code>Dir</code> that can be used to access …\nA named pipe.\nA file in the archive.\nA regular file, containing a <code>File</code> object that can be used …\nInformation about a single node in the directory tree.\nAn object packaging a <code>Dir</code> with the <code>Node</code> from which it was …\nAn object packaging a <code>File</code> with the <code>Node</code> from which it was …\nA socket.\nA symbolic link, containing the target of the link as a …\nRepresents the namespace of extended attributes.\nFetch the <code>Dir</code> object from the current <code>Node</code>.\nFetch the <code>File</code> object from the current <code>Node</code>.\nSelect a child inside the directory by name.\nRetrieve the data stored at the node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>Node</code> located at the given path in the archive.\nGet the <code>Node</code> located at the given path, raising an error …\nGet a node from the archive by its inode number.\nGet the GID of the <code>Node</code>.\nGet the inode number of a node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>Node</code> into an <code>OwnedDir</code>.\nConvert the <code>Node</code> into an <code>OwnedFile</code>.\nReturn true if the current <code>Node</code> is a directory.\nReturn true if the current <code>Node</code> is a file.\nMap a file into memory for fast parallel random access.\nGet the file mode of the <code>Node</code>.\nGet the modification time of the <code>Node</code> as a UNIX timestamp.\nA convenience method to retrieve the file name of the node …\nGet a human-readable English name for the type of file …\nOpen an existing archive for reading.\nGet the parent directory node of the current node.\nGet the absolute path to the node in the archive.\nRetrieve the path with that was used to open the archive.\nReset the directory reader to the beginning of the …\nResolve symbolic links to their targets.\nResolve symbolic links to their targets, raising an error …\nRetrieve the size of the file in bytes.\nGet the number of inodes in the archive.\nRetrieve the entire contents of the file in the form of a …\nRetrieve the entire contents of the file in the form of a …\nGet the UID of the <code>Node</code>.\nGet a node’s extended attributes in a given namespace as …\nAlign the file data to device blocks.\nCreate a block device file with the given major and minor …\nFlags to fine-tune how an entry is added to the archive.\nCreate a character device file with the given major and …\nCreate a directory with the given chidren.\nDon’t compress file data.\nDon’t deduplicated data blocks for this file.\nStore the tail of the file in a regular data block rather …\nDon’t compute block checksums for this file.\nCreate a named pipe.\nCreate a file with the provided contents.\nDon’t elide sparse blocks.\nCreate a socket.\nA single node to be added to the SquashFS archive.\nRepresents the data of a filesystem object that can be …\nA <code>Source</code> bundled with the path where it should be located.\nCreate a symbolic link to the given path.\nAn iterator yielding the nodes in a directory tree in a …\nTool to help create an archive from a directory in the …\nA basic SquashFS writer.\nAdd the provided <code>Source</code> to the archive.\nAdd a new file to the archive.\nThe type of the node and the data it contains.\nConstruct a <code>Source</code> from a <code>SourceData</code>, using defaults for …\nWrap a <code>SourceData</code> in a new <code>Source</code>, using defaults for all …\nFinish writing the archive and flush all contents to disk.\nFinish writing the archive.\n<code>BlockFlags</code> to set on the node to control how its contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe GID of the file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an iterator over a directory tree, yielding them in …\nThe file mode.\nThe modification time of the file as a Unix timestamp.\nCreate a new <code>TreeProcessor</code> for an output file.\nOpen a new output file for writing.\nAdd an entire directory tree to the archive, then finish …\nThe UID of the file.\nExtended attributes on the node.  Each one must start with …")