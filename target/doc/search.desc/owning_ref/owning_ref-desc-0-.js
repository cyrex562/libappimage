searchState.loadedDescShard("owning_ref", 0, "An owning reference.\nTypedef of a owning reference that uses a <code>Arc</code> as the owner.\nTypedef of a owning reference that uses a <code>Box</code> as the owner.\nTypedef of a mutable owning reference that uses a <code>Box</code> as …\nAn unsafe marker trait for types where clones deref to the …\nHelper trait for an erased concrete type an owner …\nOwner with the dereference type substituted to <code>Erased</code>.\nTypedef of a owning reference that uses an erased <code>Arc</code> as …\nTypedef of a owning reference that uses an erased <code>Box</code> as …\nTypedef of a mutable owning reference that uses an erased …\nTypedef of a owning reference that uses an erased <code>Rc</code> as …\nThe type of handle to be encapsulated by the OwningHandle.\nThe type of handle to be encapsulated by the OwningHandle.\nHelper trait for erasing the concrete type of what an …\nTypedef of a owning reference that uses a <code>MutexGuard</code> as …\nTypedef of a mutable owning reference that uses a …\n<code>OwningHandle</code> is a complement to <code>OwningRef</code>. Where <code>OwningRef</code> …\nAn owning reference.\nAn mutable owning reference.\nTypedef of a owning reference that uses a <code>Rc</code> as the owner.\nTypedef of a owning reference that uses a <code>RefMut</code> as the …\nTypedef of a mutable owning reference that uses a <code>RefMut</code> …\nTypedef of a owning reference that uses a <code>Ref</code> as the owner.\nTypedef of a owning reference that uses a <code>RwLockReadGuard</code> …\nTypedef of a owning reference that uses a <code>RwLockWriteGuard</code> …\nTypedef of a mutable owning reference that uses a …\nAn unsafe marker trait for types that deref to a stable …\nTypedef of a owning reference that uses a <code>String</code> as the …\nTypedef of a mutable owning reference that uses a <code>String</code> …\nTrait to implement the conversion of owner to handle for …\nTrait to implement the conversion of owner to mutable …\nTypedef of a owning reference that uses a <code>Vec</code> as the owner.\nTypedef of a mutable owning reference that uses a <code>Vec</code> as …\nA reference to the underlying owner.\nA reference to the underlying owner.\nA getter for the underlying owner.\nA mutable reference to the underlying owner.\nErases the concrete base type of the owner with a trait …\nErases the concrete base type of the owner with a trait …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the type erasure.\nDiscards the reference and retrieves the owner.\nDiscards the reference and retrieves the owner.\nDiscards the dependent object and returns the owner.\nConverts <code>self</code> into a new owning reference that points at …\nConverts <code>self</code> into a new <em>shared</em> owning reference that …\nConverts <code>self</code> into a new <em>mutable</em> owning reference that …\nConverts <code>self</code> into a new owning reference with a different …\nConverts <code>self</code> into a new owning reference with a different …\nConverts <code>self</code> into a new owning reference where the owner …\nConverts <code>self</code> into a new owning reference where the owner …\nConverts <code>self</code> into a new owning reference that points at …\nCreates a new owning reference from a owner initialized to …\nCreates a new owning reference from a owner initialized to …\nCreate a new <code>OwningHandle</code> for a type that implements …\nLike <code>new</code>, but doesn’t require <code>O</code> to implement the …\nLike <code>new</code>, but doesn’t require <code>O</code> to implement the …\nCreate a new mutable <code>OwningHandle</code> for a type that …\nCreate a new OwningHandle. The provided callback will be …\nGiven an appropriately-long-lived pointer to ourselves, …\nGiven an appropriately-long-lived pointer to ourselves, …\nTries to convert <code>self</code> into a new owning reference that …\nTries to convert <code>self</code> into a new <em>shared</em> owning reference …\nTries to convert <code>self</code> into a new <em>mutable</em> owning reference …\nTries to convert <code>self</code> into a new owning reference that …\nCreate a new OwningHandle. The provided callback will be …")